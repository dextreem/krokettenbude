/* tslint:disable */
/* eslint-disable */
/**
 * Croqueteria - API Documentation
 * Endpoints for Croqueteria API, a service that allows to describe, rate and discuss the most delicious croquettes around the globe.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CroquetteLLMRecommendationRequest,
  CroquetteRecommendationRequest,
  CroquetteRecommendationResponse,
} from '../models/index';
import {
    CroquetteLLMRecommendationRequestFromJSON,
    CroquetteLLMRecommendationRequestToJSON,
    CroquetteRecommendationRequestFromJSON,
    CroquetteRecommendationRequestToJSON,
    CroquetteRecommendationResponseFromJSON,
    CroquetteRecommendationResponseToJSON,
} from '../models/index';

export interface RecommendCroquettesRequest {
    croquetteRecommendationRequest: CroquetteRecommendationRequest;
}

export interface RecommendCroquettesByTextRequest {
    croquetteLLMRecommendationRequest: CroquetteLLMRecommendationRequest;
}

/**
 * 
 */
export class RecommendationControllerApi extends runtime.BaseAPI {

    /**
     * Provides a recommendation of croquettes best fitting for certain parameters.
     * Calculate best fitting croquette.
     */
    async recommendCroquettesRaw(requestParameters: RecommendCroquettesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CroquetteRecommendationResponse>>> {
        if (requestParameters['croquetteRecommendationRequest'] == null) {
            throw new runtime.RequiredError(
                'croquetteRecommendationRequest',
                'Required parameter "croquetteRecommendationRequest" was null or undefined when calling recommendCroquettes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/recommendations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CroquetteRecommendationRequestToJSON(requestParameters['croquetteRecommendationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CroquetteRecommendationResponseFromJSON));
    }

    /**
     * Provides a recommendation of croquettes best fitting for certain parameters.
     * Calculate best fitting croquette.
     */
    async recommendCroquettes(requestParameters: RecommendCroquettesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CroquetteRecommendationResponse>> {
        const response = await this.recommendCroquettesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides a recommendation of croquettes best fitting for certain parameters.
     * Calculate best fitting croquette by user text.
     */
    async recommendCroquettesByTextRaw(requestParameters: RecommendCroquettesByTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CroquetteRecommendationResponse>>> {
        if (requestParameters['croquetteLLMRecommendationRequest'] == null) {
            throw new runtime.RequiredError(
                'croquetteLLMRecommendationRequest',
                'Required parameter "croquetteLLMRecommendationRequest" was null or undefined when calling recommendCroquettesByText().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/recommendations/text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CroquetteLLMRecommendationRequestToJSON(requestParameters['croquetteLLMRecommendationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CroquetteRecommendationResponseFromJSON));
    }

    /**
     * Provides a recommendation of croquettes best fitting for certain parameters.
     * Calculate best fitting croquette by user text.
     */
    async recommendCroquettesByText(requestParameters: RecommendCroquettesByTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CroquetteRecommendationResponse>> {
        const response = await this.recommendCroquettesByTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
