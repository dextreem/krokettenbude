/* tslint:disable */
/* eslint-disable */
/**
 * Croqueteria - API Documentation
 * Endpoints for Croqueteria API, a service that allows to describe, rate and discuss the most delicious croquettes around the globe.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RatingCreateRequest,
  RatingResponse,
  RatingUpdateRequest,
} from '../models/index';
import {
    RatingCreateRequestFromJSON,
    RatingCreateRequestToJSON,
    RatingResponseFromJSON,
    RatingResponseToJSON,
    RatingUpdateRequestFromJSON,
    RatingUpdateRequestToJSON,
} from '../models/index';

export interface AddRatingRequest {
    ratingCreateRequest: RatingCreateRequest;
}

export interface DeleteRatingRequest {
    ratingId: number;
}

export interface RetrieveAllRatingsRequest {
    croquetteId?: number;
}

export interface RetrieveRatingForCroquetteIdRequest {
    croquetteId: number;
}

export interface UpdateRatingRequest {
    ratingId: number;
    ratingUpdateRequest: RatingUpdateRequest;
}

/**
 * 
 */
export class RatingRestAPIEndpointsApi extends runtime.BaseAPI {

    /**
     * Creates a rating for a croquette and a user.
     * Create a rating
     */
    async addRatingRaw(requestParameters: AddRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingResponse>> {
        if (requestParameters['ratingCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'ratingCreateRequest',
                'Required parameter "ratingCreateRequest" was null or undefined when calling addRating().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/ratings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatingCreateRequestToJSON(requestParameters['ratingCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingResponseFromJSON(jsonValue));
    }

    /**
     * Creates a rating for a croquette and a user.
     * Create a rating
     */
    async addRating(requestParameters: AddRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingResponse> {
        const response = await this.addRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a single rating by its ID.
     * Delete a single rating
     */
    async deleteRatingRaw(requestParameters: DeleteRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling deleteRating().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/ratings/{rating_id}`.replace(`{${"rating_id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a single rating by its ID.
     * Delete a single rating
     */
    async deleteRating(requestParameters: DeleteRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRatingRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all ratings, optionally for a certain croquette.
     * Get all ratings
     */
    async retrieveAllRatingsRaw(requestParameters: RetrieveAllRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RatingResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['croquetteId'] != null) {
            queryParameters['croquette_id'] = requestParameters['croquetteId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/ratings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingResponseFromJSON));
    }

    /**
     * Retrieves all ratings, optionally for a certain croquette.
     * Get all ratings
     */
    async retrieveAllRatings(requestParameters: RetrieveAllRatingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RatingResponse>> {
        const response = await this.retrieveAllRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single rating for a user and a croquette.
     * Get a single croquette rating.
     */
    async retrieveRatingForCroquetteIdRaw(requestParameters: RetrieveRatingForCroquetteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingResponse>> {
        if (requestParameters['croquetteId'] == null) {
            throw new runtime.RequiredError(
                'croquetteId',
                'Required parameter "croquetteId" was null or undefined when calling retrieveRatingForCroquetteId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/ratings/{croquette_id}`.replace(`{${"croquette_id"}}`, encodeURIComponent(String(requestParameters['croquetteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single rating for a user and a croquette.
     * Get a single croquette rating.
     */
    async retrieveRatingForCroquetteId(requestParameters: RetrieveRatingForCroquetteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingResponse> {
        const response = await this.retrieveRatingForCroquetteIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a single rating by its ID.
     * Update a single rating
     */
    async updateRatingRaw(requestParameters: UpdateRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingResponse>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling updateRating().'
            );
        }

        if (requestParameters['ratingUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'ratingUpdateRequest',
                'Required parameter "ratingUpdateRequest" was null or undefined when calling updateRating().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/ratings/{rating_id}`.replace(`{${"rating_id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatingUpdateRequestToJSON(requestParameters['ratingUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingResponseFromJSON(jsonValue));
    }

    /**
     * Updates a single rating by its ID.
     * Update a single rating
     */
    async updateRating(requestParameters: UpdateRatingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingResponse> {
        const response = await this.updateRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
