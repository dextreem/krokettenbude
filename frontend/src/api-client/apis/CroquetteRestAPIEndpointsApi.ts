/* tslint:disable */
/* eslint-disable */
/**
 * Croqueteria - API Documentation
 * Endpoints for Croqueteria API, a service that allows to describe, rate and discuss the most delicious croquettes around the globe.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CroquetteCreateRequest,
  CroquetteResponse,
  CroquetteUpdateRequest,
} from '../models/index';
import {
    CroquetteCreateRequestFromJSON,
    CroquetteCreateRequestToJSON,
    CroquetteResponseFromJSON,
    CroquetteResponseToJSON,
    CroquetteUpdateRequestFromJSON,
    CroquetteUpdateRequestToJSON,
} from '../models/index';

export interface AddCroquetteRequest {
    croquetteCreateRequest: CroquetteCreateRequest;
}

export interface DeleteCroquetteRequest {
    croquetteId: number;
}

export interface RetrieveAllCroquettesRequest {
    country?: string;
    nameContains?: string;
    descriptionContains?: string;
    crunchiness?: Array<number>;
    spiciness?: Array<number>;
    minAverageRating?: number;
    vegan?: boolean;
    form?: RetrieveAllCroquettesFormEnum;
    sortBy?: RetrieveAllCroquettesSortByEnum;
    sortDirection?: RetrieveAllCroquettesSortDirectionEnum;
}

export interface RetrieveCroquetteByIdRequest {
    croquetteId: number;
}

export interface UpdateCroquetteRequest {
    croquetteId: number;
    croquetteUpdateRequest: CroquetteUpdateRequest;
}

/**
 * 
 */
export class CroquetteRestAPIEndpointsApi extends runtime.BaseAPI {

    /**
     * Creates a new croquette.
     * Create a croquette
     */
    async addCroquetteRaw(requestParameters: AddCroquetteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CroquetteResponse>> {
        if (requestParameters['croquetteCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'croquetteCreateRequest',
                'Required parameter "croquetteCreateRequest" was null or undefined when calling addCroquette().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/croquettes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CroquetteCreateRequestToJSON(requestParameters['croquetteCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CroquetteResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new croquette.
     * Create a croquette
     */
    async addCroquette(requestParameters: AddCroquetteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CroquetteResponse> {
        const response = await this.addCroquetteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a single comment identified by its ID
     * Delete a croquette
     */
    async deleteCroquetteRaw(requestParameters: DeleteCroquetteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['croquetteId'] == null) {
            throw new runtime.RequiredError(
                'croquetteId',
                'Required parameter "croquetteId" was null or undefined when calling deleteCroquette().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/croquettes/{croquette_id}`.replace(`{${"croquette_id"}}`, encodeURIComponent(String(requestParameters['croquetteId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a single comment identified by its ID
     * Delete a croquette
     */
    async deleteCroquette(requestParameters: DeleteCroquetteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCroquetteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all croquettes with optional filters.
     * Get all croquettes
     */
    async retrieveAllCroquettesRaw(requestParameters: RetrieveAllCroquettesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CroquetteResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['country'] != null) {
            queryParameters['country'] = requestParameters['country'];
        }

        if (requestParameters['nameContains'] != null) {
            queryParameters['nameContains'] = requestParameters['nameContains'];
        }

        if (requestParameters['descriptionContains'] != null) {
            queryParameters['descriptionContains'] = requestParameters['descriptionContains'];
        }

        if (requestParameters['crunchiness'] != null) {
            queryParameters['crunchiness'] = requestParameters['crunchiness'];
        }

        if (requestParameters['spiciness'] != null) {
            queryParameters['spiciness'] = requestParameters['spiciness'];
        }

        if (requestParameters['minAverageRating'] != null) {
            queryParameters['minAverageRating'] = requestParameters['minAverageRating'];
        }

        if (requestParameters['vegan'] != null) {
            queryParameters['vegan'] = requestParameters['vegan'];
        }

        if (requestParameters['form'] != null) {
            queryParameters['form'] = requestParameters['form'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDirection'] != null) {
            queryParameters['sortDirection'] = requestParameters['sortDirection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/croquettes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CroquetteResponseFromJSON));
    }

    /**
     * Retrieves all croquettes with optional filters.
     * Get all croquettes
     */
    async retrieveAllCroquettes(requestParameters: RetrieveAllCroquettesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CroquetteResponse>> {
        const response = await this.retrieveAllCroquettesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single croquette by its ID.
     * Get a single croquette
     */
    async retrieveCroquetteByIdRaw(requestParameters: RetrieveCroquetteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CroquetteResponse>> {
        if (requestParameters['croquetteId'] == null) {
            throw new runtime.RequiredError(
                'croquetteId',
                'Required parameter "croquetteId" was null or undefined when calling retrieveCroquetteById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/croquettes/{croquette_id}`.replace(`{${"croquette_id"}}`, encodeURIComponent(String(requestParameters['croquetteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CroquetteResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single croquette by its ID.
     * Get a single croquette
     */
    async retrieveCroquetteById(requestParameters: RetrieveCroquetteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CroquetteResponse> {
        const response = await this.retrieveCroquetteByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a single croquette identified by its ID.
     * Update a croquette
     */
    async updateCroquetteRaw(requestParameters: UpdateCroquetteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CroquetteResponse>> {
        if (requestParameters['croquetteId'] == null) {
            throw new runtime.RequiredError(
                'croquetteId',
                'Required parameter "croquetteId" was null or undefined when calling updateCroquette().'
            );
        }

        if (requestParameters['croquetteUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'croquetteUpdateRequest',
                'Required parameter "croquetteUpdateRequest" was null or undefined when calling updateCroquette().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/croquettes/{croquette_id}`.replace(`{${"croquette_id"}}`, encodeURIComponent(String(requestParameters['croquetteId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CroquetteUpdateRequestToJSON(requestParameters['croquetteUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CroquetteResponseFromJSON(jsonValue));
    }

    /**
     * Updates a single croquette identified by its ID.
     * Update a croquette
     */
    async updateCroquette(requestParameters: UpdateCroquetteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CroquetteResponse> {
        const response = await this.updateCroquetteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const RetrieveAllCroquettesFormEnum = {
    Cylindric: 'CYLINDRIC',
    Oval: 'OVAL',
    Ball: 'BALL',
    Disk: 'DISK',
    Other: 'OTHER'
} as const;
export type RetrieveAllCroquettesFormEnum = typeof RetrieveAllCroquettesFormEnum[keyof typeof RetrieveAllCroquettesFormEnum];
/**
 * @export
 */
export const RetrieveAllCroquettesSortByEnum = {
    Name: 'NAME',
    Country: 'COUNTRY',
    Crunchiness: 'CRUNCHINESS',
    Spiciness: 'SPICINESS',
    AverageRating: 'AVERAGE_RATING',
    CreatedAt: 'CREATED_AT'
} as const;
export type RetrieveAllCroquettesSortByEnum = typeof RetrieveAllCroquettesSortByEnum[keyof typeof RetrieveAllCroquettesSortByEnum];
/**
 * @export
 */
export const RetrieveAllCroquettesSortDirectionEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type RetrieveAllCroquettesSortDirectionEnum = typeof RetrieveAllCroquettesSortDirectionEnum[keyof typeof RetrieveAllCroquettesSortDirectionEnum];
