/* tslint:disable */
/* eslint-disable */
/**
 * Croqueteria - API Documentation
 * Endpoints for Croqueteria API, a service that allows to describe, rate and discuss the most delicious croquettes around the globe.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CommentCreateRequest,
  CommentResponse,
  CommentUpdateRequest,
} from '../models/index';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    CommentCreateRequestFromJSON,
    CommentCreateRequestToJSON,
    CommentResponseFromJSON,
    CommentResponseToJSON,
    CommentUpdateRequestFromJSON,
    CommentUpdateRequestToJSON,
} from '../models/index';

export interface AddCommentRequest {
    commentCreateRequest: CommentCreateRequest;
}

export interface DeleteCommentRequest {
    commentId: number;
}

export interface RetrieveAllCommentsRequest {
    croquetteId?: number;
}

export interface RetrieveCommentByIdRequest {
    commentId: number;
}

export interface UpdateCommentRequest {
    commentId: number;
    commentUpdateRequest: CommentUpdateRequest;
}

/**
 * 
 */
export class CommentRestAPIEndpointsApi extends runtime.BaseAPI {

    /**
     * Create a comment
     */
    async addCommentRaw(requestParameters: AddCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentResponse>> {
        if (requestParameters['commentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'commentCreateRequest',
                'Required parameter "commentCreateRequest" was null or undefined when calling addComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentCreateRequestToJSON(requestParameters['commentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentResponseFromJSON(jsonValue));
    }

    /**
     * Create a comment
     */
    async addComment(requestParameters: AddCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentResponse> {
        const response = await this.addCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a single comment identified by its ID.
     * Delete a comment
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling deleteComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/comments/{comment_id}`.replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a single comment identified by its ID.
     * Delete a comment
     */
    async deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCommentRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all comments, optionally for a certain croquette.
     * Get all comments
     */
    async retrieveAllCommentsRaw(requestParameters: RetrieveAllCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommentResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['croquetteId'] != null) {
            queryParameters['croquette_id'] = requestParameters['croquetteId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CommentResponseFromJSON));
    }

    /**
     * Retrieves all comments, optionally for a certain croquette.
     * Get all comments
     */
    async retrieveAllComments(requestParameters: RetrieveAllCommentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommentResponse>> {
        const response = await this.retrieveAllCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single comment by its ID.
     * Get a single comment
     */
    async retrieveCommentByIdRaw(requestParameters: RetrieveCommentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentResponse>> {
        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling retrieveCommentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/comments/{comment_id}`.replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single comment by its ID.
     * Get a single comment
     */
    async retrieveCommentById(requestParameters: RetrieveCommentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentResponse> {
        const response = await this.retrieveCommentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a single comment identified by its ID.
     * Update a comment
     */
    async updateCommentRaw(requestParameters: UpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentResponse>> {
        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling updateComment().'
            );
        }

        if (requestParameters['commentUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'commentUpdateRequest',
                'Required parameter "commentUpdateRequest" was null or undefined when calling updateComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/comments/{comment_id}`.replace(`{${"comment_id"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommentUpdateRequestToJSON(requestParameters['commentUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentResponseFromJSON(jsonValue));
    }

    /**
     * Updates a single comment identified by its ID.
     * Update a comment
     */
    async updateComment(requestParameters: UpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentResponse> {
        const response = await this.updateCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
